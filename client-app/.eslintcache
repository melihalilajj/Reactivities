[{"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\layout\\NavBar.tsx":"4","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx":"7","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx":"8","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx":"10","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\stores\\store.ts":"11","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"12","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"13","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx":"15","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx":"16","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx":"17","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx":"18","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx":"19","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\TestError.tsx":"20","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\NotFound.tsx":"21","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\ValidationErrors.tsx":"22","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts":"23","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\ServerError.tsx":"24"},{"size":928,"mtime":1645394064628,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":1577,"mtime":1645400415354,"results":"28","hashOfConfig":"26"},{"size":827,"mtime":1645390521997,"results":"29","hashOfConfig":"26"},{"size":996,"mtime":1642900970254,"results":"30","hashOfConfig":"26"},{"size":834,"mtime":1642902449686,"results":"31","hashOfConfig":"26"},{"size":1282,"mtime":1642902722999,"results":"32","hashOfConfig":"26"},{"size":2828,"mtime":1642892169129,"results":"33","hashOfConfig":"26"},{"size":2491,"mtime":1645401438400,"results":"34","hashOfConfig":"26"},{"size":381,"mtime":1641921979858,"results":"35","hashOfConfig":"26"},{"size":467,"mtime":1645398882528,"results":"36","hashOfConfig":"26"},{"size":4118,"mtime":1642894989892,"results":"37","hashOfConfig":"26"},{"size":797,"mtime":1642902063714,"results":"38","hashOfConfig":"26"},{"size":1545,"mtime":1642902652531,"results":"39","hashOfConfig":"26"},{"size":1911,"mtime":1642898846711,"results":"40","hashOfConfig":"26"},{"size":1657,"mtime":1642899401174,"results":"41","hashOfConfig":"26"},{"size":2409,"mtime":1642899645944,"results":"42","hashOfConfig":"26"},{"size":2436,"mtime":1642899750637,"results":"43","hashOfConfig":"26"},{"size":576,"mtime":1642901394950,"results":"44","hashOfConfig":"26"},{"size":2028,"mtime":1645400748570,"results":"45","hashOfConfig":"26"},{"size":630,"mtime":1645393454314,"results":"46","hashOfConfig":"26"},{"size":507,"mtime":1645397484368,"results":"47","hashOfConfig":"26"},{"size":321,"mtime":1645398665211,"results":"48","hashOfConfig":"26"},{"size":734,"mtime":1645400094241,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"y0yfni",{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"54"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"82","messages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"84","messages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\index.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],["102","103"],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\layout\\NavBar.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["104"],"import { group } from \"console\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport {Header} from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\n\r\nexport default observer( function ActivityList(){\r\n    const {activityStore} = useStore ();\r\n    const {groupedActivities} = activityStore;\r\n\r\n  \r\n\r\n    return(\r\n        <>\r\n        {groupedActivities.map(([group, activities]) =>(\r\n           <Fragment key={group}>\r\n               <Header sub color='teal'>\r\n                {group}\r\n               </Header>\r\n                {activities.map(activity => (\r\n               <ActivityListItem key={activity.id} activity={activity}/>\r\n            ))}\r\n           </Fragment>\r\n        ))}\r\n        </>\r\n\r\n    )\r\n})","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetails.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\form\\ActivityForm.tsx",["105"],"import { observer } from \"mobx-react-lite\";\r\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Button, Form, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport {v4 as uuid} from 'uuid';\r\n\r\n\r\nexport default observer( function ActivityForm(){\r\n    const history = useHistory();\r\n    const {activityStore} = useStore();\r\n    const {createActivity, updateActivity, loading, loadActivity,loadingInitial} = activityStore;\r\n    const {id} = useParams<{id: string}>();\r\n\r\n    const [activity, setActivity] = useState({\r\n        id:'',\r\n        title:'',\r\n        category:'',\r\n        description:'',\r\n        date:'',\r\n        city:'',\r\n        venue:''\r\n    });\r\n\r\n    useEffect(() =>{\r\n        if(id) loadActivity(id).then(activity => setActivity(activity!))\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleSubmit(){\r\n        if(activity.id.length === 0){\r\n            let newActivity ={\r\n                ...activity,\r\n                id:uuid()\r\n            };\r\n          createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`) )\r\n        }else{\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n        \r\n    }\r\n\r\n    function handleInputChange(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>){\r\n        const{name,value}=event.target;\r\n        setActivity({...activity, [name]:value})\r\n    }\r\n\r\n\r\n    \r\n    if(loadingInitial) return <LoadingComponent content='Loading activity...'/>\r\n\r\n\r\n    return(\r\n        <Segment clearing>\r\n            <Form onSubmit={handleSubmit} autocomplete='off'>\r\n                <Form.Input placeholder='Title' value={activity.title} name='title' onChange={handleInputChange}/>\r\n                <Form.TextArea placeholder='Description' value={activity.description} name='description' onChange={handleInputChange}/>\r\n                <Form.Input placeholder='Category' value={activity.category} name='category' onChange={handleInputChange}/>\r\n                <Form.Input type='date' placeholder='Date' value={activity.date} name='date' onChange={handleInputChange}/>\r\n                <Form.Input placeholder='City' value={activity.city} name='city' onChange={handleInputChange}/>\r\n                <Form.Input placeholder='Venue' value={activity.venue} name='venue' onChange={handleInputChange}/>\r\n                <Button loading={loading} floated='right' positive type='submit' content='Submit' />\r\n                <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n            </Form>\r\n        </Segment>\r\n    )\r\n})","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["106"],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\layout\\LoadingComponent.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\stores\\store.ts",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",["107"],"import {makeAutoObservable, runInAction} from \"mobx\";\r\nimport { act } from \"react-dom/test-utils\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity } from \"../models/activity\";\r\n\r\n\r\n\r\nexport default class ActivityStore{\r\n  activityRegistry = new Map<string, Activity>();\r\n  selectedActivity: Activity | undefined = undefined;\r\n  editMode = false;\r\n  loading = false;\r\n  loadingInitial = true;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this)\r\n    }\r\n\r\n\r\n    get activitiesByDate(){\r\n         return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n                Date.parse(a.date) - Date.parse(b.date));\r\n    }\r\n\r\n    get groupedActivities(){\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date=activity.date;\r\n                activities[date]=activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            },{} as {[key: string]: Activity[]} )\r\n        )\r\n\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial=true;\r\n        try{\r\n            const activities = await agent.Activities.list();      \r\n               activities.forEach(activity =>{\r\n                   this.setActivity(activity);\r\n                  })\r\n                  this.setLoadingInitial(false);\r\n        }catch(error){\r\n            console.log(error);\r\n                this.setLoadingInitial(false);\r\n        }\r\n    }\r\n    \r\n    loadActivity = async(id: string) =>{\r\n        let activity = this.getActivity(id);\r\n        if(activity){\r\n            this.selectedActivity=activity;\r\n            return activity;\r\n        }else{\r\n            this.loadingInitial=true;\r\n            try{\r\n                activity=await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() =>{\r\n                    this.selectedActivity=activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            }catch(error){\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private setActivity = (activity: Activity) =>{\r\n        activity.date=activity.date.split('T')[0];\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n\r\n\r\n    private getActivity = (id: string) =>{\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) =>{\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: Activity) => {\r\n        this.loading = true;\r\n           try{\r\n            await agent.Activities.create(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.selectedActivity = activity;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction (() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: Activity) => {\r\n        this.loading=true;\r\n        try{\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                this.activityRegistry.set(activity.id, activity);\r\n                this.selectedActivity = activity;\r\n                this.editMode = false;\r\n                this.loading = false;\r\n            })\r\n        }catch(error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try{\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        }catch (error){\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n}","C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedHeader.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityFilters.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\TestError.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\NotFound.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\ValidationErrors.tsx",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\app\\stores\\commonStore.ts",[],"C:\\Users\\Mejreme Halilaj\\Reactivities\\client-app\\src\\features\\errors\\ServerError.tsx",[],{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":1,"column":10,"nodeType":"114","messageId":"115","endLine":1,"endColumn":15},{"ruleId":"112","severity":1,"message":"116","line":3,"column":10,"nodeType":"114","messageId":"115","endLine":3,"endColumn":13},{"ruleId":"112","severity":1,"message":"117","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":17},{"ruleId":"112","severity":1,"message":"116","line":2,"column":10,"nodeType":"114","messageId":"115","endLine":2,"endColumn":13},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"@typescript-eslint/no-unused-vars","'group' is defined but never used.","Identifier","unusedVar","'act' is defined but never used.","'resolve' is defined but never used.","no-global-assign","no-unsafe-negation"]